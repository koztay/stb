version: '2'
services:
  postgres:
    image: postgres:9.4
    restart: always
    env_file:
      - .env_dev
    volumes:
      - postgres-data:/var/lib/postgresql/data/


#  django:
#    build:
#      context: .
#      dockerfile: ./compose/django/Dockerfile
#    user: django
#    depends_on:
#      - postgres
#      - redis

#  scheduled_worker:
#    image: kemal:domainchecks
#    env_file: .env
#    restart: always
#    command: celery --beat -A statuspage worker -l info

  app:
    build: ./app/
    image: koztay/app
    restart: always
    depends_on:
      - postgres
      - redis
    env_file:
      - .env_dev
    expose:
      - "8000"
    volumes:
      - ./app:/usr/src/app
# yukarıdaki volume ayarını sadece local virtualbox 'larda aç. Yoksa digitalocean vb.
# cloud 'da asla ve asla çalışmıyor. Django app 'no module named ecommerce2' hatası verip
# başlayamıyor..
      - static-data:/usr/src/static_in_env/static_root/
      - media-data:/usr/src/static_in_env/media_root/
    command: /usr/local/bin/gunicorn ecommerce2.wsgi:application -w 2 -b :8000

  celery_worker:
    image: koztay/app
    restart: always
    env_file:
      - .env_dev
    depends_on:
      - app
      - postgres
      - redis
    command: celery -A ecommerce2 worker -l info # delete  -l info parameters on production

  celery_beat:
    image: koztay/app
    restart: always
    env_file:
      - .env_dev
    depends_on:
      - app
      - postgres
      - redis
    command: celery -A ecommerce2 beat -l info -S django # delete  -l info parameters on production

#  celeryworker:
#    build:
#      context : ./app/
##      dockerfile : Dockerfile
#    env_file: .env_dev
#    depends_on:
#     - postgres
#     - redis
#    command: celery -A ecommerce2 worker -l INFO
#
#  celerybeat:
#    build:
#      context : ./app/
##      dockerfile : Dockerfile
#    env_file: .env_dev
#    depends_on:
#      - postgres
#      - redis
#    command: celery -A ecommerce2 beat -l INFO -S django

  web:
    build: ./web
    restart: always
    ports:
      - "80:80"
    volumes:
      - static-data:/usr/src/static_in_env/static_root/
      - media-data:/usr/src/static_in_env/media_root/
    volumes_from:
      - app

  redis:
    image: redis:3.0.7
    restart: always
    ports:
      - "6379"

volumes:
  postgres-data:
    driver: local
  static-data:
    driver: local
  media-data:
    driver: local